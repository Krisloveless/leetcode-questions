
class Solution:
    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
        jobs = [[s, e, p] for s, e, p in zip(startTime, endTime, profit)]
        jobs.sort()
        size = len(profit)
        @cache
        # ith jobs max profit
        def helper(i):
            if i == size:
                return 0
            # skip ith
            ans = helper(i+1)
            # include ith, binary search for the lowerst index
            # the next iteration will include the larger same value index
            # in skip ith
            next_i = bisect.bisect_left(jobs, [jobs[i][1]])
            ans = max(ans, jobs[i][2] + helper(next_i))
            return ans
        return helper(0)


class Solution:
    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
        vec = [[s, e, p] for s, e, p in zip(startTime, endTime, profit)]
        vec.sort()
        # print(vec)
        size = len(profit)
        @cache
        def helper(pos):
            if pos == size:
                return 0
            # pick
            next_i = bisect.bisect_left(vec, [vec[pos][1]])
            # not pick
            value = helper(pos+1)
            max_val = max(value, helper(next_i) + vec[pos][2])
            return max_val
        return helper(0)
