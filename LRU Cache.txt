int size;
list<int> lru;                              // MRU ... LRU
unordered_map<int, list<int>::iterator> mp; // key -> iterator
unordered_map<int, int> kv;                 // key -> value

LRUCache(int capacity) : size(capacity) {}
int get(int key) {
    if (kv.count(key) == 0) return -1;
    updateLRU(key);
    return kv[key];
}
void put(int key, int value) {
    if (kv.size() == size && kv.count(key) == 0)
        evict();
    updateLRU(key);
    kv[key] = value;
}
void updateLRU(int key) {
    if (kv.count(key)) 
        lru.erase(mp[key]);
    lru.push_front(key);
    mp[key] = lru.begin();
}
void evict() {
    mp.erase(lru.back());
    kv.erase(lru.back());
    lru.pop_back();
}

class LRUCache:
    import collections
    def __init__(self, capacity: int):
        self.cache = collections.OrderedDict()
        self.cap = capacity    
        
    def get(self, key: int) -> int:
        if key in self.cache:
            self.cache.move_to_end(key, last=True)
            return self.cache[key]
        return -1
    
    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.cache[key] = value
            self.cache.move_to_end(key, last=True)
        else:
            self.cache[key] = value
            if len(self.cache) > self.cap:
                self.cache.popitem(last=False)
            


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
# class Node:
#     def __init__(self, k, v):
#         self.key = k
#         self.val = v
#         self.prev = None
#         self.next = None

# class LRUCache:
#     def __init__(self, capacity):
#         self.capacity = capacity
#         self.dic = dict()
#         self.head = Node(0, 0)
#         self.tail = Node(0, 0)
#         self.head.next = self.tail
#         self.tail.prev = self.head

#     def get(self, key):
#         if key in self.dic:
#             n = self.dic[key]
#             self._remove(n)
#             self._add(n)
#             return n.val
#         return -1

#     def put(self, key, value):
#         if key in self.dic:
#             self._remove(self.dic[key])
#         n = Node(key, value)
#         self._add(n)
#         self.dic[key] = n
#         if len(self.dic) > self.capacity:
#             n = self.head.next
#             self._remove(n)
#             del self.dic[n.key]

#     def _remove(self, node):
#         p = node.prev
#         n = node.next
#         p.next = n
#         n.prev = p

#     def _add(self, node):
#         p = self.tail.prev
#         p.next = node
#         self.tail.prev = node
#         node.prev = p
#         node.next = self.tail