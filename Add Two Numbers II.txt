ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
	stack<int> f1, f2;
	ListNode *res = new ListNode(0);
	int sum  = 0;
	while(l1){f1.push(l1->val);l1 = l1->next;}
	while(l2){f2.push(l2->val);l2 = l2->next;}

	while(!f1.empty() || !f2.empty()){
		if(!f1.empty()){sum+=f1.top();f1.pop();}
		if(!f2.empty()){sum+=f2.top();f2.pop();}
		res->val = sum % 10;
		ListNode* head = new ListNode(sum /= 10);
		head->next = res;
		res = head;
	}
	return res->val? res : res->next;
}

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        def get_value(node):
            res = ""
            while node:
                res += str(node.val)
                node = node.next
            return int(res)

        def encode_value(string):
            arr = [int(i) for i in string]
            head = ListNode()
            node = head
            pre = head
            for i in arr:
                node.val = i
                node.next = ListNode()
                pre = node
                node = node.next
            pre.next = None
            return head
        return encode_value(str(get_value(l1) + get_value(l2)))
