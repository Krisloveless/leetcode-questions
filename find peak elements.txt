class Solution {
public:
    int findPeakElement(const vector<int> &num) 
    {
        int low = 0;
        int high = num.size()-1;
        
        while(low < high)
        {
            int mid1 = (low+high)/2;
            int mid2 = mid1+1;
            if(num[mid1] < num[mid2])
                low = mid2;
            else
                high = mid1;
        }
        return low;
    }
};


class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        size = len(nums)
        if size == 1:
            return 0
        def isPeak(idx):
            if idx == 0:
                if nums[idx] > nums[idx + 1]:
                    return True
                return False
            elif idx == size - 1:
                if nums[idx] > nums[idx - 1]:
                    return True
                return False           
            return True if nums[idx] > nums[idx + 1] and nums[idx] > nums[idx - 1] else False
        def helper(l, r):
            # print(l, r)
            if l >= r:
                return -1
            if l + 1 == r:
                return l if isPeak(l) else -1
            mid = (l + r) // 2
            val = helper(l, mid)
            if val != -1:
                return val
            val = helper(mid, r)
            return val
        return helper(0, size)
            
