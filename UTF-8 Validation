class Solution:
    def validUtf8(self, data: List[int]) -> bool:
        size = len(data)
        def check(pos, length):
            if length == 1:
                value = data[pos] >> 7
                return value == 0
            elif length == 2:
                value1 = data[pos] >> 5
                value2 = data[pos+1] >> 6
                return value1 == 6 and value2 == 2
            elif length == 3:
                value1 = data[pos] >> 4
                value2 = data[pos+1] >> 6
                value3 = data[pos+2] >> 6
                return value1 == 14 and value2 == 2 and \
                value3 == 2
            value1 = data[pos] >> 3
            value2 = data[pos+1] >> 6
            value3 = data[pos+2] >> 6
            value4 = data[pos+3] >> 6
            return value1 == 30 and value2 == 2 and \
            value3 == 2 and value4 == 2
        
        @cache
        def dfs(pos):
            if pos == 0:
                return True
            for j in range(1, 5):
                if pos - j < 0:
                    break
                tmp = dfs(pos-j) and check(pos-j, j)
                if tmp:
                    return True
            return False
                    
        return dfs(size)
                
                
                
