# from functools import cache
# class Solution:
#     def uniqueLetterString(self, s: str) -> int:
#         @cache
#         def helper(substring):
#             d = collections.defaultdict(int)
#             for i in substring:
#                 d[i] += 1
#             ans = sum([1 for i in d if d[i] == 1])
#             return ans
#         @cache
#         def create(string, num):
#             if num == 1:
#                 return [i for i in string]
#             ans = []
#             for i in range(0, len(string) - num + 1):
#                 ans.append(string[i:i + num])
#             ans.extend(create(string, num - 1))
#             return ans
#         ans = [helper(i) for i in create(s, len(s))]
#         return sum(ans)
from collections import defaultdict
class Solution:
    def uniqueLetterString(self, s: str) -> int:
        """
        The key ideas behind the solution:
        1. The maximum possible substrings that can end at an index are i + 1.
        2. The contribution of a character to this substring is (i + 1) - it's last seen position.
        3. At each point, sum of all contributions, gives the number of total substrings found so far.
        4. The last seen position of char is actually i + 1.
        """
        last_position = defaultdict(int) # Used for storing the last position of each character
        contribution = defaultdict(int) # Used for storing the contribution of each character so far. This
        # will possibly be updated throughout the string traversal
        res = 0
        for i, char in enumerate(s):
            max_possible_substrs_at_idx = i + 1
            contribution[char] = max_possible_substrs_at_idx - last_position[char]
            
            res+=sum(contribution.values())
            last_position[char] = i + 1
            
        return res
        
class Solution:
    def uniqueLetterString(self, s: str) -> int:
        con = collections.defaultdict(int)
        pos = collections.defaultdict(int)
        
        res = 0
        
        for idx, val in enumerate(s):
            current = idx + 1
            con[val] = current - pos[val]
            res += sum(con.values())
            pos[val] = current
        return res
