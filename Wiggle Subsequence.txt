https://leetcode.com/problems/wiggle-subsequence/discuss/84843/Easy-understanding-DP-solution-with-O(n)-Java-version
class Solution:
    def wiggleMaxLength(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return 1
        ans = 0
        tag = None
        for i in range(1, len(nums)):
            value = nums[i] - nums[i-1]
            if tag is None and value == 0:
                continue
            elif tag is None:
                tag = 1 if value > 0 else -1
            if value == 0:
                continue
            if tag > 0 and value > 0:
                ans += 1
                tag = -tag
            elif tag < 0 and value < 0:
                ans += 1
                tag = -tag
        return ans + 1
        
class Solution:
    def wiggleMaxLength(self, nums: List[int]) -> int:
        down = [0 for i in range(len(nums))] 
        up = [0 for i in range(len(nums))]
        down[0] = 1
        up[0] = 1
        for i in range(1, len(nums)):
            if nums[i] - nums[i-1] > 0:
                up[i] = down[i-1] + 1
                down[i] = down[i-1]
            elif nums[i] - nums[i-1] < 0:
                down[i] = up[i-1] + 1
                up[i] = up[i-1]                
            else:
                up[i] = up[i-1] 
                down[i] = down[i-1]
        return max(down[len(nums)-1], up[len(nums)-1])
