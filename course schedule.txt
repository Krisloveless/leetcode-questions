class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = [[] for _ in range(numCourses)]
        visit = [0 for _ in range(numCourses)]
        for x, y in prerequisites:
            graph[x].append(y)
        def dfs(i):
            if visit[i] == -1:
                return False
            if visit[i] == 1:
                return True
            visit[i] = -1
            for j in graph[i]:
                if not dfs(j):
                    return False
            visit[i] = 1
            return True
        for i in range(numCourses):
            if not dfs(i):
                return False
        return True
        
        
import collections
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = collections.defaultdict(list)
        visit = [0 for _ in range(numCourses)]
        for cur, pre in prerequisites:
            graph[cur].append(pre)

        def helper(val):
            if visit[val] == -1:
                return False
            if visit[val] == 1:
                return True
            visit[val] = -1
            for i in graph[val]:
                if not helper(i):
                    return False
            visit[val] = 1
            return True
        
        for i in range(numCourses):
            if not helper(i):
                return False
        return True  
