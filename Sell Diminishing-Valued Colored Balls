# https://leetcode.com/problems/sell-diminishing-valued-colored-balls/discuss/927522/Python-n-log-n-690-ms
class Solution:
    def maxProfit(self, inventory: List[int], orders: int) -> int:
        inventory.sort(reverse=True) # inventory high to low 
        # add zero for a single case
        inventory += [0]
        ans = 0
        k = 1
        for i in range(len(inventory)-1): 
            if inventory[i] > inventory[i+1]: 
                if k*(inventory[i] - inventory[i+1]) < orders: 
                    ans += k*(inventory[i] + inventory[i+1] + 1)*(inventory[i] - inventory[i+1])//2 # arithmic sum 
                    orders -= k*(inventory[i] - inventory[i+1])
                else: 
                    q, r = divmod(orders, k)
                    ans += k*(2*inventory[i] - q + 1) * q//2 + r*(inventory[i] - q)
                    return ans % 1_000_000_007
            k += 1


class Solution:
    def maxProfit(self, inventory: List[int], orders: int) -> int:
        inventory.sort(reverse=True)
        # 
        step = 1
        res = 0
        inventory += [0]
        size = len(inventory)
        # print(inventory)
        for i in range(1, size):
            if inventory[i] < inventory[i-1]:
                diff = inventory[i-1] - inventory[i]
                nums = diff * step
                if nums < orders:
                    orders -= nums
                    res += step * (inventory[i] + inventory[i-1] + 1) * diff // 2
                else:
                    q, r = divmod(orders, step)
                    res += q * step * (2 * inventory[i-1] - q + 1) // 2 + r * (inventory[i-1] - q)
                    return res % (10**9 + 7)
            step += 1
