class Node:
    def __init__(self):
        self.children = collections.defaultdict(Node)
        self.isWord = False

class Trie:
    def __init__(self):
        self.root = Node()

    def insert(self, word):
        node = self.root
        for i in word:
            node = node.children[i]
        node.isWord = True
        

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        m = len(board)
        n = len(board[0])
        res = []
        visited = set()
        trie = Trie()
        for i in words:
            trie.insert(i)
        seen = set(words)
        directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]
        maxL = max([len(i) for i in words])
        def dfs(x, y, current, node):
            if maxL < len(current):
                return
            if node.isWord:
                res.append(current)
                node.isWord = False
                seen.remove(current)
            if x < 0 or x >= m or y < 0 or y >= n:
                return 
            if (x, y) in visited:
                return 
            nextNode = node.children.get(board[x][y])
            if not nextNode:
                return
            visited.add((x, y))
            for i, j in directions:
                dfs(x + i, y + j, current + board[x][y], nextNode)
            visited.remove((x, y))
        for i in range(m):
            for j in range(n):
                dfs(i, j, "", trie.root)
                if not seen:
                    return words
        return list(res)

##########################################################
# VERSION WITH PRUNING

class Node:
    def __init__(self):
        self.children = collections.defaultdict(Node)
        self.isWord = False
        self.toPrune = False

class Trie:
    def __init__(self):
        self.root = Node()

    def insert(self, word):
        node = self.root
        for i in word:
            node = node.children[i]
        node.isWord = True
        

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        m = len(board)
        n = len(board[0])
        res = []
        visited = set()
        trie = Trie()
        for i in words:
            trie.insert(i)
        seen = set(words)
        directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]
        maxL = max([len(i) for i in words])
        def dfs(x, y, current, node):
            if maxL < len(current):
                return
            if node.isWord:
                res.append(current)
                node.isWord = False
                if not node.children:
                    node.toPrune = True
                seen.remove(current)
            if x < 0 or x >= m or y < 0 or y >= n:
                return 
            if (x, y) in visited:
                return 
            nextNode = node.children.get(board[x][y])
            if not nextNode:
                return
            visited.add((x, y))
            for i, j in directions:
                dfs(x + i, y + j, current + board[x][y], nextNode)
            if nextNode.toPrune:
                del node.children[board[x][y]]
            visited.remove((x, y))
        for i in range(m):
            for j in range(n):
                dfs(i, j, "", trie.root)
                if not seen:
                    return words
        return list(res)
