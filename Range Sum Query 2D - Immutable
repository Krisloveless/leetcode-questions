class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        self.vec = matrix.copy()
        self.n = len(matrix)
        self.m = len(matrix[0])
        
        for i in range(1, self.n):
            self.vec[i][0] += self.vec[i-1][0]
        for i in range(1, self.m):
            self.vec[0][i] += self.vec[0][i-1]
        for i in range(1, self.n):
            for j in range(1, self.m):
                self.vec[i][j] += self.vec[i-1][j] + self.vec[i][j-1] - self.vec[i-1][j-1]
        # print(self.vec)
                
    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        res = self.vec[row2][col2]
        if col1 - 1 >= 0:
            res -= self.vec[row2][col1-1]
        if row1 - 1 >= 0:
            res -= self.vec[row1-1][col2]
        if col1 - 1 >= 0 and row1 - 1 >= 0:
            res += self.vec[row1-1][col1-1]
        return res

# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
