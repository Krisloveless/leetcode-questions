class Node:
    def __init__(self):
        self.children = collections.defaultdict(Node)
        self.is_word = False
        self.suggestions = []
class Trie:
    def __init__(self):
        self.root = Node()
        
    def insert(self, word):
        node = self.root
        for i in word:
            node = node.children[i]
            node.suggestions.append(word)
        node.is_word = True
        
class Solution:
    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:
        trie = Trie()
        products = sorted(products)
        for i in products:
            trie.insert(i)
        res = []
        node = trie.root
        for i in searchWord:
            if i in node.children:
                res.append(node.children[i].suggestions[:3])
            else:
                res.append([])
            node = node.children[i]
        return res
        
class Solution:
    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:
        search_d = collections.defaultdict(list)
        products = sorted(products)
        for p in products:
            for i in range(1, len(p)+1):
                search_d[p[:i]].append(p)
        res = []
        for i in range(1, len(searchWord)+1):
            res.append(search_d[searchWord[:i]][:3])
        return res
