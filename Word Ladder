class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        d = collections.defaultdict(list)
        for word in wordList:
            for i in range(len(word)):
                d[word[:i]+'*'+word[i+1:]].append(word)
        visited = set()
        ans = [float('inf')]
        q = collections.deque([(beginWord, 1)])
        while q:
            word, length = q.popleft()
            if word == endWord:
                return length
            visited.add(word)
            for i in range(len(word)):
                for j in d[word[:i]+'*'+word[i+1:]]:
                    if j not in visited:
                        q.append((j, length+1))
        return 0


class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        from collections import defaultdict, deque
        word_dict = defaultdict(list)
        n = len(beginWord)
        for word in wordList:
            for i in range(n):
                word_dict[word[:i] + "*" + word[i+1:]].append(word)
        vec = deque([(beginWord, 1)])
        visited = set()
        while vec:
            word, length = vec.popleft()
            if word == endWord:
                return length
            if word in visited:
                continue
            visited.add(word)
            for i in range(n):
                new_word = word[:i] + "*" + word[i+1:]
                for j in word_dict[new_word]:
                    vec.append((j, length + 1)) 
        return 0
