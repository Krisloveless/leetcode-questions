class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        map<char, int> charMap;
        int start = -1;
        int maxLen = 0;
        
        for (int i = 0; i < s.size(); i++) {
            if (charMap.count(s[i]) != 0) {
                start = max(start, charMap[s[i]]); // start = charMap(s[i])
            }
            charMap[s[i]] = i;
            maxLen = max(maxLen, i-start);
        }
        
        return maxLen;
    }
};

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        ans = 0
        l = r = 0
        size = len(s)
        d = collections.defaultdict(int)
        while r != size:
            d[s[r]] += 1
            while d[s[r]] == 2:
                d[s[l]] -= 1
                l += 1
            # print(ans, l, r)
            ans = max(ans, r - l + 1)
            r += 1
        return ans
