// dfs

class Solution {
public:
    void update(int idx, vector<int>& li, vector<vector<int> >& original){
        for(int i = 0; i < original.size(); i++){
            if(original[idx][i] == 1 && li[i] == 0){
                li[i] = 1;
                update(i, li, original);
            }
        }
    }
    
    int findCircleNum(vector<vector<int>>& M) {
        vector<int> visited(static_cast<int>(M.size()), 0);
        int res = 0;
        for(int i = 0; i < M.size(); i++){
            if(visited[i] == 0){
                res += 1;
                update(i, visited, M);
            }
        }
        return res;
    }
};


def findCircleNum(self, A):
    N = len(A)
    seen = set()
    def dfs(node):
        for nei, adj in enumerate(A[node]):
            if adj and nei not in seen:
                seen.add(nei)
                dfs(nei)
    
    ans = 0
    for i in xrange(N):
        if i not in seen:
            dfs(i)
            ans += 1
    return ans