class Solution {
public:
    std::vector<std::vector<std::string> > solveNQueens(int n) {
        std::vector<std::vector<std::string> > res;
        std::vector<std::string> nQueens(n, std::string(n, '.'));
        solveNQueens(res, nQueens, 0, n);
        return res;
    }
private:
    void solveNQueens(std::vector<std::vector<std::string> > &res, std::vector<std::string> &nQueens, int row, int &n) {
        if (row == n) {
            res.push_back(nQueens);
            return;
        }
        for (int col = 0; col != n; ++col)
            if (isValid(nQueens, row, col, n)) {
                nQueens[row][col] = 'Q';
                solveNQueens(res, nQueens, row + 1, n);
                nQueens[row][col] = '.';
            }
    }
    bool isValid(std::vector<std::string> &nQueens, int row, int col, int &n) {
        //check if the column had a queen before.
        for (int i = 0; i != row; ++i)
            if (nQueens[i][col] == 'Q')
                return false;
        //check if the 45° diagonal had a queen before.
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j)
            if (nQueens[i][j] == 'Q')
                return false;
        //check if the 135° diagonal had a queen before.
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; --i, ++j)
            if (nQueens[i][j] == 'Q')
                return false;
        return true;
    }
};

# 0 1 2 3
# 1 2 3 4
# 2 3 4 5
# 3 4 5 6
# ^This is i + j

# 0 -1 -2 -3
# 1 0 -1 -2
# 2 1 0 -1
# 3 2 1 0
# ^This is i-j

def solveNQueens(self, n):
    def DFS(queens, xy_dif, xy_sum):
        p = len(queens)
        if p==n:
            result.append(queens)
            return
        for q in range(n):
            if q not in queens and p-q not in xy_dif and p+q not in xy_sum: 
                DFS(queens+[q], xy_dif+[p-q], xy_sum+[p+q])  
    result = []
    DFS([],[],[])
    return [ ["."*i + "Q" + "."*(n-i-1) for i in sol] for sol in result]


class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        vlist = []
        def row_valid(x1, y1, x2, y2):
            return x1 != x2
        def col_valid(x1, y1, x2, y2):
            return y1 != y2
        def dia_valid(x1, y1, x2, y2):
            return x1 + y1 != x2 + y2 and x1 - x2 != y1 - y2

        def is_valid(x1, y1, x2, y2):
            return row_valid(x1, y1, x2, y2) and col_valid(x1, y1, x2, y2) and dia_valid(x1, y1, x2, y2)
        
        def helper(pos, queen_list):
            # print(pos, queen_list)
            if pos == n:
                vlist.append(queen_list)
                return
            if len(queen_list) == 0:
                for i in range(n):
                    helper(pos+1, [[pos, i]])
            else:
                for i in range(n):
                    valid = True    
                    for j in queen_list:
                        if not is_valid(pos, i, j[0], j[1]):
                            valid = False
                            break
                    if valid:
                        helper(pos+1, queen_list + [[pos, i]])
        helper(0, [])
        r = []
        for i in vlist:
            ql = []
            for j in i:
                q = ["." for k in range(n)]
                q[j[1]] = "Q"
                ql.append("".join(q))
            r.append(ql)
        return r
                 
