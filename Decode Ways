class Solution:
    def numDecodings(self, s: str) -> int:
        p2, p1, p_digit = 0, int(s>''), ''
        for d in s:
            p2, p1, p_digit = p1, (d>'0') * p1 + (9<int(p_digit+d)<27) * p2, d
        return p1

        # hash = {}
        # for i in range(1, 27):
        #     hash[str(i)] = chr(ord('A') - 1 + i)
        # # print(hash)
        # memo = set()
        # from functools import lru_cache
        # @lru_cache()
        # def helper(vec, group):
        #     if len(vec) == 0:
        #         memo.add(group)
        #         return
        #     if vec[0] in hash:
        #         helper( vec[1:], group + "-" + vec[0])
        #     if vec[:2] in hash:
        #         helper(vec[2:], group + "-" + vec[:2])
        # helper(s, "")    
        # # print(memo)
        
        # return len(memo)
