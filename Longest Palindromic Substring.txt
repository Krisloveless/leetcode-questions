string longestPalindrome(string s) {
    if(s.size() < 2) return s;
    int max_len = 0;
    int start_idx = 0;
    int i = 0;
    while(i < s.size()) {
        int r_ptr = i; 
        int l_ptr = i;
        //find the middle of a palindrome
        while(r_ptr < s.size()-1 && s[r_ptr] == s[r_ptr + 1]) r_ptr++; // Skip duplicate characters.
        i = r_ptr+1;
        //expand from the middle out
        while(r_ptr < s.size()-1 && l_ptr > 0 && s[r_ptr + 1] == s[l_ptr - 1]) {
            r_ptr++;
            l_ptr--;
        }
        int new_len = r_ptr - l_ptr + 1;
        if(new_len > max_len) {
            start_idx = l_ptr;
            max_len = new_len;
        }
    }
    return s.substr(start_idx, max_len);
}

@@@@@@@@@@@@@@@@@ LOOK HERE
def longestPalindrome(self, s):
    res = ""
    for i in xrange(len(s)):
        # odd case, like "aba"
        tmp = self.helper(s, i, i)
        if len(tmp) > len(res):
            res = tmp
        # even case, like "abba"
        tmp = self.helper(s, i, i+1)
        if len(tmp) > len(res):
            res = tmp
    return res
 
# get the longest palindrome, l, r are the middle indexes   
# from inner to outer
def helper(self, s, l, r):
    while l >= 0 and r < len(s) and s[l] == s[r]:
        l -= 1; r += 1
    return s[l+1:r]




XXXXXXXXXXXXXXXXXXXXXXXX
int longestPalindrome(string s) {
    int odds = 0;
    for (char c='A'; c<='z'; c++)
        odds += count(s.begin(), s.end(), c) & 1;
    return s.size() - odds + (odds > 0);
}
XXXXXXXXXXXXXXXXXXXXXXXX

class Solution:
    def longestPalindrome(self, s: str) -> str:
        size = len(s)
        def pali1(pos):
            l = pos - 1
            r = pos + 1
            while l >= 0 and r < size:
                if s[l] != s[r]:
                    break
                l -= 1
                r += 1
            l += 1
            r -= 1
            return l, r
        def pali2(l, r):
            while l >= 0 and r < size:
                if s[l] != s[r]:
                    break
                l -= 1
                r += 1        
            l += 1
            r -= 1
            return l, r
        L, R = 0, 0
        maxL = 0
        for i in range(size):
            l, r = pali1(i)
            if r - l + 1 > maxL:
                L, R = l, r
                maxL = r - l + 1
        # print(L, R)
        for i in range(size - 1):
            l, r = pali2(i, i+1)
            if l > r:
                continue
            if r - l + 1 > maxL:
                L, R = l, r
                maxL = r - l + 1
        return s[L:R+1]
