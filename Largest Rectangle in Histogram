# https://leetcode.com/problems/largest-rectangle-in-histogram/discuss/1727432/Daily-LeetCoding-Challenge-January-Day-29
class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        stack = []
        maxArea = 0
        for i in range(len(heights)):
            startIdx = i
            while stack and stack[-1][1] > heights[i]:
                idx, height = stack.pop()
                maxArea = max(maxArea, height * (i - idx))
                startIdx = idx
            stack.append((startIdx, heights[i])) # store (idx, height)
        
        for startIdx, height in stack:
            maxArea = max(maxArea, height * (len(heights) - startIdx))
            
        return maxArea

class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        stack = []
        ans = 0
        for idx, val in enumerate(heights):
            current_idx = idx
            while stack and stack[-1][1] > val:
                pre_idx, pre_val = stack.pop()
                ans = max(ans, pre_val * (idx - pre_idx))
                current_idx = pre_idx
            stack.append((current_idx, val))
        size = len(heights)
        for idx, val in stack:
            ans = max(ans, (size - idx) * val)
        return ans
            
