# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        def doit(node):
            if node:
                vals.append(str(node.val))
                doit(node.left)
                doit(node.right)
            else:
                vals.append('#')
        vals = []
        doit(root)
        # print(vals)
        return ' '.join(vals)

    def deserialize(self, data):
        def doit():
            val = next(vals)
            if val == '#':
                return None
            node = TreeNode(int(val))
            node.left = doit()
            node.right = doit()
            return node
        vals = iter(data.split())
        return doit()
        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        vec = []
        def helper(node):
            if not node:
                vec.append('#')
                return 
            vec.append(str(node.val))
            helper(node.left)
            helper(node.right)
        helper(root)
        # print(",".join(vec))
        return ",".join(vec)
        
    def deserialize(self, data):
        vec = collections.deque(data.split(','))
        def helper():
            value = vec.popleft()
            if value == '#':
                return None
            node = TreeNode(value)
            node.left = helper()
            node.right = helper()
            return node
        node = helper()
        return node
            
                
# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
