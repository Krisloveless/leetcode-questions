#     To find out how much money I need to win the range lo..hi (the game starts with the range 1..n), I try each possible x in the range (except hi, which is pointless because hi-1 costs less and provides more information), calculate how much I need when using that x, and take the minimum of those amounts.
# For each number x in range[i~j]
# we do: result_when_pick_x = x + max{DP([i~x-1]), DP([x+1, j])}
# --> // the max means whenever you choose a number, the feedback is always bad and therefore leads you to a worse branch.
# then we get DP([i~j]) = min{xi, ... ,xj}
# --> // this min makes sure that you are minimizing your cost.
# Bottom-up dynamic programming:
class Solution:
    def getMoneyAmount(self, n):
        need = [[0] * (n+1) for _ in range(n+1)]
        for lo in range(n, 0, -1):
            for hi in range(lo+1, n+1):
                need[lo][hi] = min(x + max(need[lo][x-1], need[x+1][hi])
                                   for x in range(lo, hi))
        return need[1][n]
