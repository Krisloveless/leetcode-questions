    double res = 0.0f;
    double p = 0.1f;
    int hi, k_v, n_v;
    void prob(double current_prob, int current_val) {
        //cout << current_val << " " << current_prob << endl;
        if (current_val >= k_v) {
            if (current_val <= n_v) {
                res += current_prob; 
            }
        return;
        }
        for(int i = 1; i <= hi; i++) {
            prob(current_prob * p, current_val+i);
        }
    }
    double new21Game(int n, int k, int maxPts) {
        p = 1.0f / maxPts;
        hi = maxPts;
        k_v = k;
        n_v = n;
        prob(1.0f, 0);
        return res;
    }


    double new21Game(int N, int K, int W) {
        if (K == 0 || N >= K + W) return 1.0;
        vector<double> dp(N + 1);
        dp[0] = 1.0;
        double Wsum = 1.0, res = 0.0;
        for (int i = 1; i <= N; ++i) {
            dp[i] = Wsum / W;
            if (i < K) Wsum += dp[i]; else res += dp[i];
            if (i - W >= 0) Wsum -= dp[i - W];
        }
        return res;
    }

https://leetcode.com/problems/new-21-game/discuss/132334/One-Pass-DP-O(N)