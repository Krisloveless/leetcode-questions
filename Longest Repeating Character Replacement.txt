import collections
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        def helper(char):
            klocal = k
            idx_changed = collections.deque([])
            l = maxlen = 0
            for r in range(len(s)):
                if s[r] != char:
                    if klocal > 0:
                        klocal -= 1
                        idx_changed.append(r)
                    else:
                        if len(idx_changed) == 0:
                            l = r + 1
                        else:
                            l = idx_changed.popleft() + 1
                            idx_changed.append(r)
                # print(char, maxlen, r, l)
                maxlen = max(maxlen, r - l + 1)
            return maxlen
        res = 0
        for i in set(s):
            res = helper(i) if res < helper(i) else res
        return res
        
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        def helper(letter, k):
            ans = 0
            l = 0
            vec = collections.deque([])
            for i in range(len(s)):
                if s[i] == letter:
                    ans = max(ans, i - l + 1)   
                    continue
                if not vec and k == 0:
                    l = i + 1
                    continue
                if k > 0:
                    k -= 1
                    vec.append(i)
                else:
                    l = vec.popleft() + 1
                    vec.append(i)
                ans = max(ans, i - l + 1)   
            return ans
        # print(helper('A', k), helper('B', k))
        count = collections.Counter(s)
        ans = 0
        for i in count:
            ans = max(ans, helper(i, k))
        return ans
        
