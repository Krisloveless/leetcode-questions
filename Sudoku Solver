class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def isRowValid(row, col, num):
            for i in range(9):
                if i == col:
                    continue
                if board[row][i] != '.' and int(board[row][i]) == num:
                    return False
            return True
        
        def isColValid(row, col, num):
            for i in range(9):
                if i == row:
                    continue
                if board[i][col] != '.' and int(board[i][col]) == num:
                    return False
            return True
        
        def isBoxValid(row, col, num):
            start_row = row // 3 * 3
            start_col = col // 3 * 3
            for i in range(9):
                local_row = i // 3 + start_row
                local_col = i % 3 + start_col
                if local_row == row and local_col == col:
                    continue
                if board[local_row][local_col] != '.' and int(board[local_row][local_col]) == num:
                    return False
            return True
        
        def isValid(x, y, num):
            return isRowValid(x, y, num) and isColValid(x, y, num) and isBoxValid(x, y, num)
        
        def solve():
            for i in range(9):
                for j in range(9):
                    if board[i][j] != '.':
                        continue
                    for k in range(1, 10):
                        if isValid(i, j, k):
                            board[i][j] = str(k)
                            res = solve()
                            if res:
                                return True
                            else:
                                board[i][j] = '.'
                    return False
            return True
        solve()
        # for i in range(9):
        #     for j in range(9):
        #         print(board[i][j], end=" ")
        #     print()


class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def is_row_valid(n, m, k):
            return k not in board[n] 

        def is_col_valid(n, m, k):
            return k not in [board[i][m] for i in range(9)]

        def is_grid_valid(n, m, k):
            grid_row_idx = n // 3
            grid_col_idx = m // 3
            for i in range(9):
                x = i // 3 + grid_row_idx * 3
                y = i % 3 + grid_col_idx * 3
                if board[x][y] == k:
                    return False
            return True
        
        def solve():
            for i in range(9):
                for j in range(9):
                    if board[i][j] != '.':
                        continue
                    for k in range(1, 10):
                        k = str(k)
                        if is_row_valid(i, j, k) and is_col_valid(i, j, k) and is_grid_valid(i, j, k):
                            board[i][j] = k
                            res = solve()
                            if res:
                                return True
                            else:
                                board[i][j] = '.'
                    return False
            return True
        solve()
